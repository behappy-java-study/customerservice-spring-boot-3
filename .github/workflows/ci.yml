name: CI JVM workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the Environment to deploy'
        type: choice
        required: true
        options:
          - dev
          - qa
          - uat
          - load
          - prod
        default: 'dev'

jobs:

  build:

    runs-on: ubuntu-latest

    permissions:
      id-token: write # need this for OIDC
      contents: read

    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup jdk
        uses: actions/setup-java@v1
        with:
          java-version: 17
          distribution: 'adopt'
          cache: maven

      - name: Print debug info
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          java --version

      - name: Build with Maven and Buildpacks
        env:
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY_NAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: mvn clean spring-boot:build-image -Dspring-boot.build-image.imageName=$DOCKER_USERNAME/$DOCKER_REPOSITORY:latest

      - name: Set project version as environment variable
        run: echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Print debug info
        run: |
          echo project version is ${{ env.PROJECT_VERSION }}

      - name: Tag and push image to Docker Hub
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY_NAME }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_TAG: ${{ env.PROJECT_VERSION }}-original
        run: |
          echo "$DOCKER_PASSWORD" | sudo docker login -u ${DOCKER_USERNAME} --password-stdin $DOCKER_REGISTRY
          docker tag $DOCKER_USERNAME/$DOCKER_REPOSITORY:latest $DOCKER_USERNAME/$DOCKER_REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_USERNAME/$DOCKER_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG" 
